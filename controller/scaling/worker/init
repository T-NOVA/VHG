#!/usr/bin/env python

import json
import paramiko
import sys
import time
import yaml
import argparse
import os



def _do(ssh, command):
    stdin, stdout, stderr = ssh.exec_command(command)
    print stdout.read()
    sys.stderr.write(stderr.read())


def scalling(s):
    with open(s) as f:
        data = json.loads(f.read())

    data2 = {};
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for (name, ip) in data.items():
        name2 = name.split("-");
        if (len(name2) == 2 ):
            try:
                data2[name2[0]][name2[1]] = ip;
            except:
                data2[name2[0]] = {};
                data2[name2[0]][name2[1]] = ip;

    # get the management ip of controller
    ssh.connect('127.0.0.1', username="root")
    stdin, stdout, stderr = ssh.exec_command("cat /srv/pillar/ips.sls | grep 'controller' | sed 's/^.*management: //' | sed 's/}//'")
    masterIptemp = stdout.read()
    masterIp=masterIptemp.rstrip('\r\n')
    print "ip controller : ",masterIp

    ips_json = {"ips": data2}
    yml = yaml.safe_dump(ips_json, allow_unicode=True)
    print yml

    nametemp=data.items()[0][0].split("-")[0]
    ips = data2[nametemp]

    ssh.connect(ips["management"], username="root")
    # scp = SCPClient(ssh.get_transport())
    # scp.put("../../tnova_send_metric", "/usr/local/bin/tnova_send_metric")

    # get the uuid of the vm and set at name
    stdin, stdout, stderr = ssh.exec_command("curl -s http://169.254.169.254/openstack/latest/meta_data.json | sed -e 's/.*\"uuid\": \"//; s/\".*//'")
    uuidtemp = stdout.read()
    uuid=uuidtemp.rstrip('\r\n')
    name = nametemp+"_"+uuid
    print name, " ", ips, " connect to ", ips["management"]

    _do(ssh, 'service salt-minion stop')
    _do(ssh, 'wget -O - https://repo.saltstack.com/apt/debian/8/amd64/archive/2016.3.2/SALTSTACK-GPG-KEY.pub | sudo apt-key add -')
    _do(ssh, "sed '/saltstack/d' /etc/apt/sources.list")
    _do(ssh, 'echo "deb http://repo.saltstack.com/apt/debian/8/amd64/archive/2016.3.2 jessie main" >> /etc/apt/sources.list.d/saltstack.list')
    _do(ssh, 'apt-get update')
    _do(ssh, 'apt-get install salt-minion=2016.3.2+ds-1 salt-common=2016.3.2+ds-1 --yes')
    _do(ssh, 'easy_install --upgrade pip')
    _do(ssh, 'pip install docker-py pip --upgrade')
    _do(ssh, 'echo "%s" > /etc/salt/minion_id' % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hostname" % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hosts" % name)
    _do(ssh, '/etc/init.d/hostname.sh start')
    # for everbody
    _do(ssh, "echo %s salt >> /etc/hosts" % masterIp)
    _do(ssh, 'echo "roles:" > /etc/salt/grains')
    _do(ssh, 'echo "  - core" >> /etc/salt/grains')
    _do(ssh, 'echo "  - worker" >> /etc/salt/grains')
    _do(ssh, "service salt-minion restart")

    print "start salt"
    _do(ssh, "salt-call state.highstate"%s) # do only on this node because restart docker service (and kill current job)
    _do(ssh, "salt-call state.sls worker"%s) # normally do by the orchestrator

    print "Finish complete"


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', "-f", type=str, required=True)
    args = parser.parse_args()
    scalling(args.file)
