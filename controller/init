#!/usr/bin/env python


import json


import paramiko
import subprocess
import sys
import time
import yaml

from scp import SCPClient


def _do(ssh, command):
    stdin, stdout, stderr = ssh.exec_command(command)
    print stdout.read()
    sys.stderr.write(stderr.read())


with open("data.json") as f:
    data = json.loads(f.read())

data2 = {};
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
for (name, ip) in data.items():
    name2 = name.split(".");
    try:
        data2[name2[0]][name2[1]] = ip;
    except:
        data2[name2[0]] = {};
        data2[name2[0]][name2[1]] = ip;

masterIp = data2["Controller"]["management"]
ips_json = {"ips": data2}
yml = yaml.safe_dump(ips_json, allow_unicode=True)
print yml

for (name, ips) in data2.items():
    print name, " ", ips, " connect to ", ips["management"]
    ssh.connect(ips["management"], username="root")
    scp = SCPClient(ssh.get_transport())
    scp.put("tnova_send_metric","/usr/local/bin/tnova_send_metric")

    _do(ssh, 'service salt-minion stop')
    _do(ssh, 'wget -O - https://repo.saltstack.com/apt/debian/8/amd64/latest/SALTSTACK-GPG-KEY.pub | apt-key add -')
    _do(ssh, "sed '/saltstack/d' /etc/apt/sources.list")
    _do(ssh, 'echo "deb http://repo.saltstack.com/apt/debian/8/amd64/latest jessie main" >> /etc/apt/sources.list')
    _do(ssh, 'apt-get update')
    _do(ssh, 'apt-get install salt-minion docker-engine=1.10.3-0~jessie --yes')
    _do(ssh, 'easy_install --upgrade pip')
    _do(ssh, 'pip install docker-py==1.8.0 pip --upgrade')
    _do(ssh, 'echo "%s" > /etc/salt/minion_id' % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hostname" % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hosts" % name)
    _do(ssh, '/etc/init.d/hostname.sh start')

    _do(ssh, 'chmod +x /usr/local/bin/tnova_send_metric')

    # for everbody
    _do(ssh, "echo %s salt >> /etc/hosts" % masterIp)
    for (name2, ips2) in data2.items():
        _do(ssh, "echo " + ips2["management"] + "   " + name2 + " >> /etc/hosts")
    _do(ssh, 'echo "roles:" > /etc/salt/grains')
    if (name == "Controller"):
        _do(ssh, 'apt-get install salt-master --yes')
        _do(ssh, 'echo "fileserver_backend:" >> /etc/salt/master')
        _do(ssh, 'echo "  - roots" >> /etc/salt/master')
        _do(ssh, 'echo "  - minion" >> /etc/salt/master')
        _do(ssh, 'echo "  - git" >> /etc/salt/master')
        _do(ssh, 'echo "" >> /etc/salt/master')
        _do(ssh, 'echo "file_recv: True" >> /etc/salt/master')
        _do(ssh, 'echo "auto_accept: True" >> /etc/salt/master')
        _do(ssh, 'echo "open_mode: True" >> /etc/salt/master')
        _do(ssh, 'service salt-master restart')
        _do(ssh, 'mkdir -p /srv/pillar/')
        _do(ssh, 'echo "mine_functions:" > /srv/pillar/swift.sls')
        _do(ssh, 'echo "  network.ip_addrs: [eth1]"  >> /srv/pillar/swift.sls')
        _do(ssh, 'echo "' + yml + '"  >> /srv/pillar/ips.sls')
        _do(ssh, 'echo "base:" > /srv/pillar/top.sls')
        _do(ssh, 'echo "  \'*\':" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - swift" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - ips" >> /srv/pillar/top.sls')
        print "Finish Controller"
    elif (name == "VHG"):
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - vhg" >> /etc/salt/grains')
    elif (name == "Frontend"):
        _do(ssh, 'echo  "*/2 *    * * *   /usr/local/bin/tnova_send_metric worker $(curl -s http://localhost:8080/api/monitoring/queuesize)" |  crontab ')
        _do(ssh, 'echo "  - broker" >> /etc/salt/grains')
        _do(ssh, 'echo "  - swift_proxy" >> /etc/salt/grains')
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - frontend" >> /etc/salt/grains')
        _do(ssh, 'echo "  - admission" >> /etc/salt/grains')
    elif (name == "vCDN"):
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - swift_object" >> /etc/salt/grains')
    elif (name == "Worker"):
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - worker" >> /etc/salt/grains')
    _do(ssh, "service salt-minion restart")

print "start salt (sleep 30s)"
time.sleep(30)
ssh.connect("127.0.0.1", username="root")
_do(ssh, 'salt "Frontend" state.highstate')
_do(ssh, 'salt "*" state.highstate')

print "Finish complete"
