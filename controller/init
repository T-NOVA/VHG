#!/usr/bin/env python


import json
import paramiko
import sys
import time
import yaml


def _do(ssh, command):
    stdin, stdout, stderr = ssh.exec_command(command)
    print stdout.read()
    sys.stderr.write(stderr.read())


with open("data.json") as f:
    data = json.loads(f.read())

data2 = {"controller": {}};
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
for (name, ip) in data.items():
    name2 = name.split("-");
    # remove the controller public ip format need by tenor
    if (len(name2) == 2):
        # change the format for machine -> ip
        try:  # if already exist  add a new ip to the list of ip of vdu
            data2[name2[0]][name2[1]] = ip;
        except:  # else create a nex list for this vdu
            data2[name2[0]] = {};
            data2[name2[0]][name2[1]] = ip;

masterIp = data2["controller"]["management"]
ips_json = {"ips": data2}

# parse json file to yaml to create a pillar
yml = yaml.safe_dump(ips_json, allow_unicode=True)
print yml


def configureSalt():
    global name2
    print name, " ", ips, " connect to ", ips["management"]
    ssh.connect(ips["management"], username="root")
    # scp = SCPClient(ssh.get_transport())
    # scp.put("tnova_send_metric","/usr/local/bin/tnova_send_metric")
    _do(ssh, 'service salt-minion stop')
    _do(ssh,
        'wget -O - https://repo.saltstack.com/apt/debian/8/amd64/archive/2016.3.2/SALTSTACK-GPG-KEY.pub | sudo apt-key add -')
    _do(ssh, "sed '/saltstack/d' /etc/apt/sources.list")
    _do(ssh,
        'echo "deb http://repo.saltstack.com/apt/debian/8/amd64/archive/2016.3.2 jessie main" >> /etc/apt/sources.list.d/saltstack.list')
    _do(ssh, 'apt-get update')
    _do(ssh, 'apt-get install salt-minion=2016.3.2+ds-1 salt-common=2016.3.2+ds-1 --yes')
    _do(ssh, 'easy_install --upgrade pip')
    _do(ssh, 'pip install docker-py pip --upgrade')
    _do(ssh, 'echo "%s" > /etc/salt/minion_id' % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hostname" % name)
    _do(ssh, "sed -i -e 's/VHG/%s/g' /etc/hosts" % name)
    _do(ssh, '/etc/init.d/hostname.sh start')
    # _do(ssh, 'chmod +x /usr/local/bin/tnova_send_metric')
    # for everbody
    _do(ssh, "echo %s salt >> /etc/hosts" % masterIp)
    for (name2, ips2) in data2.items():
        _do(ssh, "echo " + ips2["management"] + "   " + name2 + " >> /etc/hosts")
    _do(ssh, 'echo "roles:" > /etc/salt/grains')
    if ("controller" in name):
        _do(ssh, 'apt-get install salt-master=2016.3.2+ds-1 salt-common=2016.3.2+ds-1 --yes')
        _do(ssh, 'echo "fileserver_backend:" >> /etc/salt/master')
        _do(ssh, 'echo "  - roots" >> /etc/salt/master')
        _do(ssh, 'echo "  - minion" >> /etc/salt/master')
        _do(ssh, 'echo "  - git" >> /etc/salt/master')
        _do(ssh, 'echo "" >> /etc/salt/master')
        _do(ssh, 'echo "file_recv: True" >> /etc/salt/master')
        _do(ssh, 'echo "auto_accept: True" >> /etc/salt/master')
        _do(ssh, 'service salt-master restart')
        _do(ssh, 'mkdir -p /srv/pillar/')
        _do(ssh, 'echo "mine_functions:" > /srv/pillar/swift.sls')
        _do(ssh, 'echo "  network.ip_addrs: [eth1]"  >> /srv/pillar/swift.sls')
        _do(ssh, 'echo "' + yml + '"  >> /srv/pillar/ips.sls')

        _do(ssh, 'echo "docker-pkg:" >> /srv/pillar/docker.sls')
        _do(ssh, 'echo "  lookup:" >> /srv/pillar/docker.sls')
        _do(ssh, 'echo "    version: 1.12.1-0~jessie" >> /srv/pillar/docker.sls')

        _do(ssh, 'echo "mine_functions:" >> /srv/pillar/swarm.sls')
        _do(ssh, 'echo "  key_swarm:" >> /srv/pillar/swarm.sls')
        _do(ssh, 'echo "    - mine_function: cmd.run" >> /srv/pillar/swarm.sls')
        _do(ssh, 'echo "    - docker swarm join-token worker -q" >> /srv/pillar/swarm.sls')

        _do(ssh, 'echo "base:" > /srv/pillar/top.sls')
        _do(ssh, 'echo "  \'*\':" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - swift" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - ips" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - docker" >> /srv/pillar/top.sls')
        _do(ssh, 'echo "    - swarm" >> /srv/pillar/top.sls')

        _do(ssh, 'echo "  - controller" >> /etc/salt/grains')
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')

        print "Finish Controller"
    elif ("VHG" in name):
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - vhg" >> /etc/salt/grains')
    elif ("Frontend" in name):
        # _do(ssh, 'echo  "*/2 *    * * *   /usr/local/bin/tnova_send_metric worker $(curl -s http://localhost:5000/api/monitoring/queuesize)" |  crontab ')
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - broker" >> /etc/salt/grains')
        _do(ssh, 'echo "  - swift_proxy" >> /etc/salt/grains')
        _do(ssh, 'echo "  - frontend" >> /etc/salt/grains')
        _do(ssh, 'echo "  - admission" >> /etc/salt/grains')
    elif ("vCDN" in name):
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - swift_object" >> /etc/salt/grains')
    elif ("Worker" in name):
        _do(ssh, 'apt-get install docker-engine --yes')
        _do(ssh, 'echo "  - core" >> /etc/salt/grains')
        _do(ssh, 'echo "  - worker" >> /etc/salt/grains')
    _do(ssh, "service salt-minion restart")
    # force to register on master
    _do(ssh, "salt-call cmd.run 'date'")

# force start with controller
name = "controller"
ips = data2["controller"]
configureSalt()
# do for the other
for (name, ips) in data2.items():
    if ("controller" not in name):
        configureSalt()

print "sleep 10s"
time.sleep(10)
print "Finish (now start salt)"
